/*
 * WARNING: DO NOT EDIT THIS FILE. This file is generated by yarn gen. Any changes will be overwritten.
 */

import * as I from 'immutable';
import {
    TruncateOperationsAction,
    TRUNCATE_NAMESPACE_SUCCESSFUL,
    TRUNCATE_NAMESPACE_FAILED,
    TRUNCATE_NAMESPACE_IN_PROGRESS,
    TRUNCATE_SET_SUCCESSFUL,
    TRUNCATE_SET_FAILED,
    TRUNCATE_SET_IN_PROGRESS,
} from '../actions/truncateOperationsActions';
import { ApiState } from '../state/ApiState';
import { createTypedMap } from '../../../core/types/TypedMap';

export default function truncateOperationsReducer(
    state: ApiState,
    action: TruncateOperationsAction
): ApiState {
    if (state == null) {
        // No state yet. create initial
        state = createTypedMap();
    } else if (!I.Iterable.isIterable(state)) {
        // State plain object. Convert to immutable.
        state = I.fromJS(state);
    }

    switch (action.type) {
        case TRUNCATE_NAMESPACE_IN_PROGRESS:
            state = state.setIn(['truncateOperations', 'truncateNamespace', 'inProgress'], true);
            break;
        case TRUNCATE_NAMESPACE_SUCCESSFUL:
            {
                const payload = I.fromJS(action.payload);
                state = state.withMutations(map =>
                    map
                        .setIn(['truncateOperations', 'truncateNamespace', 'inProgress'], false)
                        .removeIn(['truncateOperations', 'truncateNamespace', 'errorValue'])
                        .setIn(['truncateOperations', 'truncateNamespace', 'successValue'], payload)
                        .setIn(['last', 'successValue'], payload)
                        .removeIn(['last', 'errorValue'])
                );
            }
            break;
        case TRUNCATE_NAMESPACE_FAILED:
            {
                const payload = I.fromJS(action.payload);
                state = state.withMutations(map =>
                    map
                        .setIn(['truncateOperations', 'truncateNamespace', 'inProgress'], false)
                        .removeIn(['truncateOperations', 'truncateNamespace', 'successValue'])
                        .setIn(
                            ['truncateOperations', 'truncateNamespace', 'errorValue'],
                            I.fromJS(action.payload)
                        )
                        .removeIn(['last', 'successValue'])
                        .setIn(['last', 'errorValue'], payload)
                );
            }
            break;

        case TRUNCATE_SET_IN_PROGRESS:
            state = state.setIn(['truncateOperations', 'truncateSet', 'inProgress'], true);
            break;
        case TRUNCATE_SET_SUCCESSFUL:
            {
                const payload = I.fromJS(action.payload);
                state = state.withMutations(map =>
                    map
                        .setIn(['truncateOperations', 'truncateSet', 'inProgress'], false)
                        .removeIn(['truncateOperations', 'truncateSet', 'errorValue'])
                        .setIn(['truncateOperations', 'truncateSet', 'successValue'], payload)
                        .setIn(['last', 'successValue'], payload)
                        .removeIn(['last', 'errorValue'])
                );
            }
            break;
        case TRUNCATE_SET_FAILED:
            {
                const payload = I.fromJS(action.payload);
                state = state.withMutations(map =>
                    map
                        .setIn(['truncateOperations', 'truncateSet', 'inProgress'], false)
                        .removeIn(['truncateOperations', 'truncateSet', 'successValue'])
                        .setIn(
                            ['truncateOperations', 'truncateSet', 'errorValue'],
                            I.fromJS(action.payload)
                        )
                        .removeIn(['last', 'successValue'])
                        .setIn(['last', 'errorValue'], payload)
                );
            }
            break;
    }

    return state;
}
