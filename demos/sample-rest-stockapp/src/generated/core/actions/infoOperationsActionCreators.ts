/*
 * WARNING: DO NOT EDIT THIS FILE. This file is generated by yarn gen. Any changes will be overwritten.
 */

import ExtenderFunctions, {
    ApiActionCreatorExtender,
    CallType,
} from '../helpers/ApiActionExtender';
import { RouterAction } from 'connected-react-router';
import { ThunkDispatch } from 'redux-thunk';
import * as gapi from '../api';
import { RestClientError } from '../api';
import { StoreState } from '../../../core/types/StoreState';
import {
    InfoAnyAction,
    infoAnyFailed,
    infoAnyInProgress,
    infoAnySuccessful,
    InfoNodeAction,
    infoNodeFailed,
    infoNodeInProgress,
    infoNodeSuccessful,
} from './infoOperationsActions';
import { xformApiResponse } from '../helpers/apiTransformers';
import { getConfiguration } from '../helpers/apiConfiguration';
import SimpleResponse from '../types/SimpleResponse';
const conf = getConfiguration();
const api = new gapi.InfoOperationsApi(conf, process.env.REACT_APP_API_BASE || '');

export const doInfoAny = (
    infoRequests: string[],
    onSuccess?: (successArg?: SimpleResponse) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<SimpleResponse, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, InfoAnyAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<SimpleResponse, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.infoAny(infoRequests, {
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(infoAnyInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([infoAnySuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([infoAnyFailed(xformedError)], xformedError);
    }
};

export const doInfoNode = (
    infoRequests: string[],
    nodeName: string,
    onSuccess?: (successArg?: SimpleResponse) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<SimpleResponse, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, InfoNodeAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<SimpleResponse, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.infoNode(infoRequests, nodeName, {
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(infoNodeInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([infoNodeSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([infoNodeFailed(xformedError)], xformedError);
    }
};
