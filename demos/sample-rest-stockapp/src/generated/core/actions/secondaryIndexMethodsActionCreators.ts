/*
 * WARNING: DO NOT EDIT THIS FILE. This file is generated by yarn gen. Any changes will be overwritten.
 */

import ExtenderFunctions, {
    ApiActionCreatorExtender,
    CallType,
} from '../helpers/ApiActionExtender';
import { RouterAction } from 'connected-react-router';
import { ThunkDispatch } from 'redux-thunk';
import * as gapi from '../api';
import { RestClientError, RestClientIndex } from '../api';
import { StoreState } from '../../../core/types/StoreState';
import {
    IndexInformationAction,
    indexInformationFailed,
    indexInformationInProgress,
    indexInformationSuccessful,
    CreateIndexAction,
    createIndexFailed,
    createIndexInProgress,
    createIndexSuccessful,
    GetIndexStatsAction,
    getIndexStatsFailed,
    getIndexStatsInProgress,
    getIndexStatsSuccessful,
    DropIndexAction,
    dropIndexFailed,
    dropIndexInProgress,
    dropIndexSuccessful,
} from './secondaryIndexMethodsActions';
import { xformApiResponse } from '../helpers/apiTransformers';
import { getConfiguration } from '../helpers/apiConfiguration';
import SimpleResponse from '../types/SimpleResponse';
const conf = getConfiguration();
const api = new gapi.SecondaryIndexMethodsApi(conf, process.env.REACT_APP_API_BASE || '');

export const doIndexInformation = (
    namespace?: string,
    onSuccess?: (successArg?: SimpleResponse) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<SimpleResponse, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, IndexInformationAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<SimpleResponse, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.indexInformation(namespace, {
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(indexInformationInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([indexInformationSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([indexInformationFailed(xformedError)], xformedError);
    }
};

export const doCreateIndex = (
    indexModel: RestClientIndex,
    onSuccess?: (successArg?: SimpleResponse) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<SimpleResponse, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, CreateIndexAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<SimpleResponse, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.createIndex(indexModel, {
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(createIndexInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([createIndexSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([createIndexFailed(xformedError)], xformedError);
    }
};

export const doGetIndexStats = (
    name: string,
    namespace: string,
    onSuccess?: (successArg?: SimpleResponse) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<SimpleResponse, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, GetIndexStatsAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<SimpleResponse, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.getIndexStats(name, namespace, {
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(getIndexStatsInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([getIndexStatsSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([getIndexStatsFailed(xformedError)], xformedError);
    }
};

export const doDropIndex = (
    name: string,
    namespace: string,
    onSuccess?: (successArg?: SimpleResponse) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<SimpleResponse, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, DropIndexAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<SimpleResponse, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.dropIndex(name, namespace, {
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(dropIndexInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([dropIndexSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([dropIndexFailed(xformedError)], xformedError);
    }
};
