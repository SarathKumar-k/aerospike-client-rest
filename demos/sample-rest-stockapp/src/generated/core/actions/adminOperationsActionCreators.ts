/*
 * WARNING: DO NOT EDIT THIS FILE. This file is generated by yarn gen. Any changes will be overwritten.
 */

import ExtenderFunctions, {
    ApiActionCreatorExtender,
    CallType,
} from '../helpers/ApiActionExtender';
import { RouterAction } from 'connected-react-router';
import { ThunkDispatch } from 'redux-thunk';
import * as gapi from '../api';
import { RestClientError, RestClientRole, Privilege, RestClientUserModel, User } from '../api';
import { StoreState } from '../../../core/types/StoreState';
import {
    GetRolesAction,
    getRolesFailed,
    getRolesInProgress,
    getRolesSuccessful,
    CreateRoleAction,
    createRoleFailed,
    createRoleInProgress,
    createRoleSuccessful,
    GetRoleAction,
    getRoleFailed,
    getRoleInProgress,
    getRoleSuccessful,
    DropRoleAction,
    dropRoleFailed,
    dropRoleInProgress,
    dropRoleSuccessful,
    GrantPrivilegesAction,
    grantPrivilegesFailed,
    grantPrivilegesInProgress,
    grantPrivilegesSuccessful,
    RevokePrivilegesAction,
    revokePrivilegesFailed,
    revokePrivilegesInProgress,
    revokePrivilegesSuccessful,
    GetUsersAction,
    getUsersFailed,
    getUsersInProgress,
    getUsersSuccessful,
    CreateUserAction,
    createUserFailed,
    createUserInProgress,
    createUserSuccessful,
    GetUserAction,
    getUserFailed,
    getUserInProgress,
    getUserSuccessful,
    DropUserAction,
    dropUserFailed,
    dropUserInProgress,
    dropUserSuccessful,
    ChangePasswordAction,
    changePasswordFailed,
    changePasswordInProgress,
    changePasswordSuccessful,
    GrantRolesAction,
    grantRolesFailed,
    grantRolesInProgress,
    grantRolesSuccessful,
    RevokeRolesAction,
    revokeRolesFailed,
    revokeRolesInProgress,
    revokeRolesSuccessful,
} from './adminOperationsActions';
import { xformApiResponse } from '../helpers/apiTransformers';
import { getConfiguration } from '../helpers/apiConfiguration';
import SimpleResponse from '../types/SimpleResponse';
const conf = getConfiguration();
const api = new gapi.AdminOperationsApi(conf, process.env.REACT_APP_API_BASE || '');

export const doGetRoles = (
    onSuccess?: (successArg?: SimpleResponse) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<SimpleResponse, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, GetRolesAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<SimpleResponse, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.getRoles({
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(getRolesInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([getRolesSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([getRolesFailed(xformedError)], xformedError);
    }
};

export const doCreateRole = (
    rcRole: RestClientRole,
    onSuccess?: (successArg?: SimpleResponse) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<SimpleResponse, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, CreateRoleAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<SimpleResponse, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.createRole(rcRole, {
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(createRoleInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([createRoleSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([createRoleFailed(xformedError)], xformedError);
    }
};

export const doGetRole = (
    name: string,
    onSuccess?: (successArg?: RestClientRole) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<RestClientRole, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, GetRoleAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<RestClientRole, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.getRole(name, {
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(getRoleInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([getRoleSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([getRoleFailed(xformedError)], xformedError);
    }
};

export const doDropRole = (
    name: string,
    onSuccess?: (successArg?: SimpleResponse) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<SimpleResponse, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, DropRoleAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<SimpleResponse, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.dropRole(name, {
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(dropRoleInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([dropRoleSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([dropRoleFailed(xformedError)], xformedError);
    }
};

export const doGrantPrivileges = (
    name: string,
    privileges: Privilege[],
    onSuccess?: (successArg?: SimpleResponse) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<SimpleResponse, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, GrantPrivilegesAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<SimpleResponse, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.grantPrivileges(name, privileges, {
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(grantPrivilegesInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([grantPrivilegesSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([grantPrivilegesFailed(xformedError)], xformedError);
    }
};

export const doRevokePrivileges = (
    name: string,
    privileges: Privilege[],
    onSuccess?: (successArg?: SimpleResponse) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<SimpleResponse, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, RevokePrivilegesAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<SimpleResponse, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.revokePrivileges(name, privileges, {
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(revokePrivilegesInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([revokePrivilegesSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([revokePrivilegesFailed(xformedError)], xformedError);
    }
};

export const doGetUsers = (
    onSuccess?: (successArg?: SimpleResponse) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<SimpleResponse, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, GetUsersAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<SimpleResponse, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.getUsers({
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(getUsersInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([getUsersSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([getUsersFailed(xformedError)], xformedError);
    }
};

export const doCreateUser = (
    userInfo: RestClientUserModel,
    onSuccess?: (successArg?: SimpleResponse) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<SimpleResponse, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, CreateUserAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<SimpleResponse, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.createUser(userInfo, {
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(createUserInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([createUserSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([createUserFailed(xformedError)], xformedError);
    }
};

export const doGetUser = (
    user: string,
    onSuccess?: (successArg?: User) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<User, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, GetUserAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<User, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.getUser(user, {
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(getUserInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([getUserSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([getUserFailed(xformedError)], xformedError);
    }
};

export const doDropUser = (
    user: string,
    onSuccess?: (successArg?: SimpleResponse) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<SimpleResponse, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, DropUserAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<SimpleResponse, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.dropUser(user, {
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(dropUserInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([dropUserSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([dropUserFailed(xformedError)], xformedError);
    }
};

export const doChangePassword = (
    password: string,
    user: string,
    onSuccess?: (successArg?: SimpleResponse) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<SimpleResponse, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, ChangePasswordAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<SimpleResponse, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.changePassword(password, user, {
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(changePasswordInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([changePasswordSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([changePasswordFailed(xformedError)], xformedError);
    }
};

export const doGrantRoles = (
    roles: string[],
    user: string,
    onSuccess?: (successArg?: SimpleResponse) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<SimpleResponse, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, GrantRolesAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<SimpleResponse, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.grantRoles(roles, user, {
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(grantRolesInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([grantRolesSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([grantRolesFailed(xformedError)], xformedError);
    }
};

export const doRevokeRoles = (
    roles: string[],
    user: string,
    onSuccess?: (successArg?: SimpleResponse) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<SimpleResponse, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, RevokeRolesAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<SimpleResponse, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.revokeRoles(roles, user, {
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(revokeRolesInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([revokeRolesSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([revokeRolesFailed(xformedError)], xformedError);
    }
};
