/*
 * WARNING: DO NOT EDIT THIS FILE. This file is generated by yarn gen. Any changes will be overwritten.
 */

import ExtenderFunctions, {
    ApiActionCreatorExtender,
    CallType,
} from '../helpers/ApiActionExtender';
import { RouterAction } from 'connected-react-router';
import { ThunkDispatch } from 'redux-thunk';
import * as gapi from '../api';
import { RestClientError } from '../api';
import { StoreState } from '../../../core/types/StoreState';
import {
    TruncateNamespaceAction,
    truncateNamespaceFailed,
    truncateNamespaceInProgress,
    truncateNamespaceSuccessful,
    TruncateSetAction,
    truncateSetFailed,
    truncateSetInProgress,
    truncateSetSuccessful,
} from './truncateOperationsActions';
import { xformApiResponse } from '../helpers/apiTransformers';
import { getConfiguration } from '../helpers/apiConfiguration';
import SimpleResponse from '../types/SimpleResponse';
const conf = getConfiguration();
const api = new gapi.TruncateOperationsApi(conf, process.env.REACT_APP_API_BASE || '');

export const doTruncateNamespace = (
    namespace: string,
    date?: string,
    onSuccess?: (successArg?: SimpleResponse) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<SimpleResponse, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, TruncateNamespaceAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<SimpleResponse, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.truncateNamespace(namespace, date, {
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(truncateNamespaceInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([truncateNamespaceSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([truncateNamespaceFailed(xformedError)], xformedError);
    }
};

export const doTruncateSet = (
    namespace: string,
    set: string,
    date?: string,
    onSuccess?: (successArg?: SimpleResponse) => any | void,
    onError?: (errorArg?: RestClientError) => any | void,
    extender?: ExtenderFunctions<SimpleResponse, RestClientError>
) => async (dispatch: ThunkDispatch<StoreState, void, TruncateSetAction | RouterAction>) => {
    const calls = new ApiActionCreatorExtender<SimpleResponse, RestClientError>(
        {
            [CallType.apiCall]: async () =>
                await xformApiResponse(
                    await api.truncateSet(namespace, set, date, {
                        headers: { accept: 'application/json, application/msgpack' },
                    })
                ),
            [CallType.success]: dispatch,
            [CallType.error]: dispatch,
        },
        onSuccess,
        onError,
        extender
    );

    dispatch(truncateSetInProgress());

    try {
        const ret = await calls.apiCall();
        await calls.success([truncateSetSuccessful(ret)], ret);
        return ret;
    } catch (error) {
        const xformedError = await xformApiResponse(error);
        return calls.error([truncateSetFailed(xformedError)], xformedError);
    }
};
